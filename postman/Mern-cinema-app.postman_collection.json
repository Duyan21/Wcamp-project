{
	"info": {
		"_postman_id": "245df96b-ce59-4d7b-afe7-fbe59899611a",
		"name": "Mern-cinema-app",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26612209"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json()\r",
							"pm.test(\"Status code includes 200 and 400\", () => {\r",
							"    if(response.name === \"First name field is required\") {\r",
							"    pm.response.to.have.status(400);\r",
							"    } else if(response.name === \"Last name field is required\") {\r",
							"    pm.response.to.have.status(400);\r",
							"    } else if(response.email === \"Email field is required\") {\r",
							"    pm.response.to.have.status(400);\r",
							"    } else if(response.password === \"Password must be at least 6 characters\") {\r",
							"    pm.response.to.have.status(400);\r",
							"    } else if(response.email === \"Email already exists\") {\r",
							"    pm.response.to.have.status(400);\r",
							"    } else {pm.response.to.have.status(200);}\r",
							"})\r",
							"\r",
							"pm.test(\"Response is an object that has all properties needed, and properties have right format\", () => {\r",
							"    if(pm.response.code === 200){\r",
							"    pm.expect(response).to.be.an(\"object\");\r",
							"    pm.expect(response).to.haveOwnProperty(\"_id\");\r",
							"    pm.expect(response).to.haveOwnProperty(\"first_name\").to.be.a(\"string\");\r",
							"    pm.expect(response).to.haveOwnProperty(\"last_name\").to.be.a(\"string\");\r",
							"    pm.expect(response).to.haveOwnProperty(\"email\").to.be.a(\"string\");\r",
							"    pm.expect(response).to.haveOwnProperty(\"password\");\r",
							"    pm.expect(response).to.haveOwnProperty(\"createdAt\");\r",
							"    pm.expect(response).to.haveOwnProperty(\"updatedAt\")\r",
							"    } \r",
							"    if(pm.response.code === 400) {\r",
							"        if(pm.response.name){\r",
							"            pm.expect(response).to.be.an(\"object\");\r",
							"            pm.expect(response.name).to.be.a(\"string\");\r",
							"            pm.expect(response.name).to.be.oneOf[(\"Last name field is required\", \"First name field is required\")]}\r",
							"        if(pm.response.email){\r",
							"            pm.expect(response).to.be.an(\"object\");\r",
							"            pm.expect(response.email).to.be.a(\"string\");\r",
							"            pm.expect(response.email).to.be.oneOf[(\"Email field is required\", \"Email already exists\")]}\r",
							"        if(pm.response.password){\r",
							"            pm.expect(response).to.be.an(\"object\");\r",
							"            pm.expect(response.password).to.be(\"Password must be at least 6 characters\")}\r",
							"    }\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n          \"first_name\": \"{{$randomFirstName}}\",\r\n          \"last_name\": \"{{$randomLastName}}\",\r\n          \"email\": \"{{$randomEmail}}\",\r\n          \"password\": \"{{$randomPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.environment.set(\"token\", response.token);\r",
							"pm.test(\"Status code includes 200, 400, and 404\", () => {\r",
							"    if(response.email === \"Email field is required\") {\r",
							"    pm.response.to.have.status(400);\r",
							"    } else if(response.password === \"Password field is required\") {\r",
							"    pm.response.to.have.status(400);\r",
							"    } else if(response.email === \"Email is invalid\"){\r",
							"    pm.response.to.have.status(400);\r",
							"    } else if(response.emailnotfound === \"Email not found\"){\r",
							"    pm.response.to.have.status(404);\r",
							"    } else if(response.passwordincorrect === \"Password incorrect\") {\r",
							"    pm.response.to.have.status(400);\r",
							"    }\r",
							"    else {pm.response.to.have.status(200);}\r",
							"})\r",
							"\r",
							"pm.test(\"Response is an object that has all properties needed, and properties have right format\", () => {\r",
							"    if(pm.response.code === 200){\r",
							"    pm.expect(response).to.be.an(\"object\");\r",
							"    pm.expect(response).to.haveOwnProperty(\"success\");\r",
							"    pm.expect(response.success).to.be.a(\"boolean\");\r",
							"    pm.expect(response.success).to.eql(true);\r",
							"    pm.expect(response).to.haveOwnProperty(\"token\").to.be.a(\"string\");\r",
							"    } \r",
							"    if(pm.response.code === 400) {\r",
							"        if(pm.response.email){\r",
							"            pm.expect(response).to.be.an(\"object\");\r",
							"            pm.expect(response.email).to.be.a(\"string\");\r",
							"            pm.expect(response.email).to.be.oneOf[(\"Email field is required\", \"Email is invalid\")]}\r",
							"        if(pm.response.password){\r",
							"            pm.expect(response).to.be.an(\"object\");\r",
							"            pm.expect(response.password).to.be.a(\"string\");\r",
							"            pm.expect(response.password).to.be(\"Password field is required\")}\r",
							"        if(pm.response.passwordincorrect){\r",
							"            pm.expect(response).to.be.an(\"object\");\r",
							"            pm.expect(response.passwordincorrect).to.be.a(\"string\");\r",
							"            pm.expect(response.passwordincorrect).to.be(\"Password incorrect\")}\r",
							"    }\r",
							"    if(pm.response.code === 404) {\r",
							"        pm.expect(response).to.be.an(\"object\");\r",
							"        pm.expect(response.emailnotfound).to.be.a(\"string\");\r",
							"        pm.expect(response.emailnotfound).to.be(\"Email not found\")} \r",
							"})  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"laly@gmail.com\",\r\n    \"password\" : \"1234567890\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.environment.set(\"movieId\", response.data[\"_id\"]);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Movie is created successfully\", () => {\r",
							"    pm.expect(response).to.be.an(\"object\");\r",
							"    pm.expect(response).to.haveOwnProperty(\"data\").to.be.an(\"object\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"title\").to.be.a(\"string\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"movieDescription\").to.be.a(\"string\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"movieImgUrl\").to.be.a(\"string\");\r",
							"    pm.expect(response).to.haveOwnProperty(\"message\").to.be.a(\"string\");\r",
							"    pm.expect(response.message).to.eql(\"Movie was created\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{$randomPhrase}}\",\r\n    \"movieDescription\": \"action\",\r\n    \"movieImgUrl\": \"{{$randomUrl}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/movies",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find All Movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\",  () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body returns correct format and result\", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"data\").to.be.an(\"array\");\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/movies",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find one movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\",  () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has all needed properties that has right format \", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"movie\").to.be.an(\"object\");\r",
							"    pm.expect(response.movie).to.haveOwnProperty(\"movieDescription\").to.be.a(\"string\");\r",
							"    pm.expect(response.movie).to.haveOwnProperty(\"movieImgUrl\").to.be.a(\"string\");\r",
							"    pm.expect(response).to.haveOwnProperty(\"seances\").to.be.an(\"array\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/movies/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"movies",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{movieId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Movie is updated successfully\", () => {\r",
							"    pm.expect(response).to.be.an(\"object\");\r",
							"    pm.expect(response).to.haveOwnProperty(\"data\").to.be.an(\"object\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"title\").to.be.a(\"string\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"movieDescription\").to.be.a(\"string\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"movieImgUrl\").to.be.a(\"string\");\r",
							"    pm.expect(response).to.haveOwnProperty(\"message\").to.be.a(\"string\");\r",
							"    pm.expect(response.message).to.eql(\"Movie was updated\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{token}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"movieName\": \"the adventure of henna\",\r\n    \"movieDescription\": \"action\",\r\n    \"movieImgUrl\": \"henna.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/movies/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"movies",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{movieId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Movie is removed successfully\", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"message\").to.be.a(\"string\");\r",
							"    pm.expect(response.message).to.eql(\"Movie was removed\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer  {{token}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/movies/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"movies",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{movieId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a room",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.environment.set(\"slugRoom\", response.data[\"slug\"]);\r",
							"pm.test(\"Status code is 201\",  () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has all needed properties that has right format \", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"data\").to.be.an(\"object\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"roomSeatsPlan\").to.be.an(\"array\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"roomName\").to.be.a(\"string\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"roomDescription\").to.be.a(\"string\");\r",
							"    pm.expect(response.message).to.eql(\"Room was created\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"roomName\": \"R7\",\r\n    \"roomDescription\": \"Bright\",\r\n    \"roomSeatsPlan\": [[true,false]]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/rooms",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rooms"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find all rooms",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\",  () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body returns correct format and result\", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"data\").to.be.an(\"array\");\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/rooms",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rooms"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find one room",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\",  () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has all needed properties that has right format \", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"data\").to.be.an(\"object\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"roomSeatsPlan\").to.be.an(\"array\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"roomName\").to.be.a(\"string\");\r",
							"     pm.expect(response.data).to.haveOwnProperty(\"roomDescription\").to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/rooms/{{slugRoom}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rooms",
						"{{slugRoom}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove rooms",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Rooms is removed successfully\", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"message\").to.be.a(\"string\");\r",
							"    pm.expect(response.message).to.eql(\"Room was removed\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/rooms/:slug",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rooms",
						":slug"
					],
					"variable": [
						{
							"key": "slug",
							"value": "{{slugRoom}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new seanse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.environment.set(\"seanse-id\", response.data[\"_id\"]);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has all needed properties that has right format\", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"data\").to.be.an(\"object\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"bookings\").to.be.an(\"array\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"movie\").to.be.a(\"string\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"hour\").to.be.a(\"string\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"date\").to.be.a(\"string\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"13/5/2023\",\r\n    \"hour\": \"2\",\r\n    \"movie\": \"6457073bacb76b22f4b1190b\",\r\n    \"bookings\": [\r\n                [\r\n                    {\r\n                        \"isExsist\": false,\r\n                        \"isBooked\": false,\r\n                        \"row\": 0,\r\n                        \"col\": 0\r\n                    },\r\n                    {\r\n                        \"isExsist\": true,\r\n                        \"isBooked\": false,\r\n                        \"row\": 0,\r\n                        \"col\": 1\r\n                    }\r\n                ]\r\n                ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/seanses",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"seanses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all seanses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\",  () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body returns correct format and result\", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"data\").to.be.an(\"array\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/seanses",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"seanses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get one seanse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\",  () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has all needed properties that has right format\", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"data\").to.be.an(\"object\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"bookings\").to.be.an(\"array\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"movie\").to.be.a(\"string\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"hour\").to.be.a(\"string\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"date\").to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/seanses/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"seanses",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{seanse-id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update seanse",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();;\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has all needed properties that has right format\", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"data\").to.be.an(\"object\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"bookings\").to.be.an(\"array\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"movie\").to.be.a(\"string\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"hour\").to.be.a(\"string\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"date\").to.be.a(\"string\");\r",
							"    pm.expect(response.message).to.eql(\"Seanse was updated\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"19/5/2023\",\r\n    \"hour\": \"1,5\",\r\n    \"movie\": \"6457073bacb76b22f4b1190b\",\r\n    \"bookings\": [\r\n                [\r\n                    {\r\n                        \"isExsist\": true,\r\n                        \"isBooked\": false,\r\n                        \"row\": 0,\r\n                        \"col\": 0\r\n                    },\r\n                    {\r\n                        \"isExsist\": true,\r\n                        \"isBooked\": false,\r\n                        \"row\": 0,\r\n                        \"col\": 1\r\n                    }\r\n                ]\r\n                ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/seanses/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"seanses",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{seanse-id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove seanse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Seanse is removed successfully\", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"message\").to.be.a(\"string\");\r",
							"    pm.expect(response.message).to.eql(\"Seanse was removed\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/seanses/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"seanses",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{seanse-id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update room",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Status code is 200\",  () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has all needed properties that has right format \", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"data\").to.be.an(\"object\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"roomSeatsPlan\").to.be.an(\"array\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"roomName\").to.be.a(\"string\");\r",
							"    pm.expect(response.data).to.haveOwnProperty(\"roomDescription\").to.be.a(\"string\");\r",
							"    pm.expect(response.message).to.eql(\"Room was updated\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"roomName\" : \"R8\",\r\n    \"roomDescription\" : \"Dark\",\r\n    \"roomSeatsPlan\" : [[true,false]]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/rooms/:slug",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rooms",
						":slug"
					],
					"variable": [
						{
							"key": "slug",
							"value": "{{slugRoom}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}